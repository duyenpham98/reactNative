{"version":3,"sources":["module.js"],"names":["NativeModules","NativeEventEmitter","RNLocalize","__DEV__","Error","constants","initialConstants","emitter","getCalendar","calendar","getCountry","country","getCurrencies","currencies","getLocales","locales","getNumberFormatSettings","numberFormatSettings","getTemperatureUnit","temperatureUnit","getTimeZone","timeZone","uses24HourClock","usesMetricSystem","usesAutoDateAndTime","usesAutoTimeZone","handlers","Set","addListener","next","JSON","stringify","forEach","handler"],"mappings":"AAEA,OAASA,aAAT,CAAwBC,kBAAxB,KAAkD,cAAlD,C,GAWQC,CAAAA,U,CAAeF,a,CAAfE,U,CAER,GAAIC,OAAO,EAAID,UAAU,EAAI,IAA7B,CAAmC,CACjC,KAAM,IAAIE,CAAAA,KAAJ,gyBAAN,CAOD,CAED,GAAIC,CAAAA,SAAgC,CAAGH,UAAU,CAACI,gBAAlD,CACA,GAAMC,CAAAA,OAAO,CAAG,GAAIN,CAAAA,kBAAJ,CAAuBC,UAAvB,CAAhB,CAEA,MAAO,SAASM,CAAAA,WAAT,EAAiC,CACtC,MAAOH,CAAAA,SAAS,CAACI,QAAjB,CACD,CACD,MAAO,SAASC,CAAAA,UAAT,EAA8B,CACnC,MAAOL,CAAAA,SAAS,CAACM,OAAjB,CACD,CACD,MAAO,SAASC,CAAAA,aAAT,EAAmC,CACxC,MAAOP,CAAAA,SAAS,CAACQ,UAAjB,CACD,CACD,MAAO,SAASC,CAAAA,UAAT,EAAgC,CACrC,MAAOT,CAAAA,SAAS,CAACU,OAAjB,CACD,CACD,MAAO,SAASC,CAAAA,uBAAT,EAAyD,CAC9D,MAAOX,CAAAA,SAAS,CAACY,oBAAjB,CACD,CACD,MAAO,SAASC,CAAAA,kBAAT,EAA+C,CACpD,MAAOb,CAAAA,SAAS,CAACc,eAAjB,CACD,CACD,MAAO,SAASC,CAAAA,WAAT,EAA+B,CACpC,MAAOf,CAAAA,SAAS,CAACgB,QAAjB,CACD,CACD,MAAO,SAASC,CAAAA,eAAT,EAAoC,CACzC,MAAOjB,CAAAA,SAAS,CAACiB,eAAjB,CACD,CACD,MAAO,SAASC,CAAAA,gBAAT,EAAqC,CAC1C,MAAOlB,CAAAA,SAAS,CAACkB,gBAAjB,CACD,CACD,MAAO,SAASC,CAAAA,mBAAT,EAAgD,CACrD,MAAOnB,CAAAA,SAAS,CAACmB,mBAAjB,CACD,CACD,MAAO,SAASC,CAAAA,gBAAT,EAA6C,CAClD,MAAOpB,CAAAA,SAAS,CAACoB,gBAAjB,CACD,CAED,MAAO,IAAMC,CAAAA,QAAuB,CAAG,GAAIC,CAAAA,GAAJ,EAAhC,CAEPpB,OAAO,CAACqB,WAAR,CAAoB,uBAApB,CAA6C,SAACC,IAAD,CAAiC,CAC5E,GAAIC,IAAI,CAACC,SAAL,CAAeF,IAAf,IAAyBC,IAAI,CAACC,SAAL,CAAe1B,SAAf,CAA7B,CAAwD,CACtDA,SAAS,CAAGwB,IAAZ,CACAH,QAAQ,CAACM,OAAT,CAAiB,SAAAC,OAAO,QAAIA,CAAAA,OAAO,EAAX,EAAxB,EACD,CACF,CALD","sourcesContent":["// @flow\n\nimport { NativeModules, NativeEventEmitter } from \"react-native\";\n\nimport type {\n  Calendar,\n  Locale,\n  LocalizationConstants,\n  NumberFormatSettings,\n  Option,\n  TemperatureUnit,\n} from \"./types\";\n\nconst { RNLocalize } = NativeModules;\n\nif (__DEV__ && RNLocalize == null) {\n  throw new Error(`react-native-localize: NativeModule.RNLocalize is null. To fix this issue try these steps:\n• Run \\`react-native link react-native-localize\\` in the project root.\n• Rebuild and re-run the app.\n• If you are using CocoaPods on iOS, run \\`pod install\\` in the \\`ios\\` directory and then rebuild and re-run the app. You may also need to re-open Xcode to get the new pods.\n• Check that the library was linked correctly when you used the link command by running through the manual installation instructions in the README.\n* If you are getting this error while unit testing you need to mock the native module. Follow the guide in the README.\nIf none of these fix the issue, please open an issue on the Github repository: https://github.com/react-native-community/react-native-localize`);\n}\n\nlet constants: LocalizationConstants = RNLocalize.initialConstants;\nconst emitter = new NativeEventEmitter(RNLocalize);\n\nexport function getCalendar(): Calendar {\n  return constants.calendar;\n}\nexport function getCountry(): string {\n  return constants.country;\n}\nexport function getCurrencies(): string[] {\n  return constants.currencies;\n}\nexport function getLocales(): Locale[] {\n  return constants.locales;\n}\nexport function getNumberFormatSettings(): NumberFormatSettings {\n  return constants.numberFormatSettings;\n}\nexport function getTemperatureUnit(): TemperatureUnit {\n  return constants.temperatureUnit;\n}\nexport function getTimeZone(): string {\n  return constants.timeZone;\n}\nexport function uses24HourClock(): boolean {\n  return constants.uses24HourClock;\n}\nexport function usesMetricSystem(): boolean {\n  return constants.usesMetricSystem;\n}\nexport function usesAutoDateAndTime(): Option<boolean> {\n  return constants.usesAutoDateAndTime;\n}\nexport function usesAutoTimeZone(): Option<boolean> {\n  return constants.usesAutoTimeZone;\n}\n\nexport const handlers: Set<Function> = new Set();\n\nemitter.addListener(\"localizationDidChange\", (next: LocalizationConstants) => {\n  if (JSON.stringify(next) !== JSON.stringify(constants)) {\n    constants = next;\n    handlers.forEach(handler => handler());\n  }\n});\n"]}