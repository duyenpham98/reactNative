{"version":3,"sources":["index.js"],"names":["getLocales","handlers","getCalendar","getCountry","getCurrencies","getNumberFormatSettings","getTemperatureUnit","getTimeZone","uses24HourClock","usesMetricSystem","usesAutoDateAndTime","usesAutoTimeZone","logUnknownEvent","type","console","error","getPartialTag","languageCode","scriptCode","addEventListener","handler","has","add","removeEventListener","delete","findBestAvailableLanguage","languageTags","locales","i","length","currentLocale","languageTag","isRTL","includes","partial","next"],"mappings":"AAEA,OAASA,UAAT,CAAqBC,QAArB,KAAqC,UAArC,CAmBA,OACEC,WADF,CAEEC,UAFF,CAGEC,aAHF,CAIEJ,UAJF,CAKEK,uBALF,CAMEC,kBANF,CAOEC,WAPF,CAQEC,eARF,CASEC,gBATF,CAUEC,mBAVF,CAWEC,gBAXF,KAYO,UAZP,CAcA,QAASC,CAAAA,eAAT,CAAyBC,IAAzB,CAAuC,CACrCC,OAAO,CAACC,KAAR,KAAmBF,IAAnB,iDACD,CACD,QAASG,CAAAA,aAAT,MAA6D,IAApCC,CAAAA,YAAoC,MAApCA,YAAoC,CAAtBC,UAAsB,MAAtBA,UAAsB,CAC3D,MAAOD,CAAAA,YAAY,EAAIC,UAAU,CAAG,IAAMA,UAAT,CAAsB,EAApC,CAAnB,CACD,CAED,MAAO,SAASC,CAAAA,gBAAT,CACLN,IADK,CAELO,OAFK,CAGC,CACN,GAAIP,IAAI,GAAK,QAAb,CAAuB,CACrBD,eAAe,CAACC,IAAD,CAAf,CACD,CAFD,IAEO,IAAI,CAACZ,QAAQ,CAACoB,GAAT,CAAaD,OAAb,CAAL,CAA4B,CACjCnB,QAAQ,CAACqB,GAAT,CAAaF,OAAb,EACD,CACF,CAED,MAAO,SAASG,CAAAA,mBAAT,CACLV,IADK,CAELO,OAFK,CAGC,CACN,GAAIP,IAAI,GAAK,QAAb,CAAuB,CACrBD,eAAe,CAACC,IAAD,CAAf,CACD,CAFD,IAEO,IAAIZ,QAAQ,CAACoB,GAAT,CAAaD,OAAb,CAAJ,CAA2B,CAChCnB,QAAQ,CAACuB,MAAT,CAAgBJ,OAAhB,EACD,CACF,CAED,MAAO,SAASK,CAAAA,yBAAT,CACLC,YADK,CAKG,CACR,GAAMC,CAAAA,OAAO,CAAG3B,UAAU,EAA1B,CAEA,IAAK,GAAI4B,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGD,OAAO,CAACE,MAA5B,CAAoCD,CAAC,EAArC,CAAyC,CACvC,GAAME,CAAAA,aAAa,CAAGH,OAAO,CAACC,CAAD,CAA7B,CADuC,GAE/BG,CAAAA,WAF+B,CAEMD,aAFN,CAE/BC,WAF+B,CAElBd,YAFkB,CAEMa,aAFN,CAElBb,YAFkB,CAEJe,KAFI,CAEMF,aAFN,CAEJE,KAFI,CAIvC,GAAIN,YAAY,CAACO,QAAb,CAAsBF,WAAtB,CAAJ,CAAwC,CACtC,MAAO,CAAEA,WAAW,CAAXA,WAAF,CAAeC,KAAK,CAALA,KAAf,CAAP,CACD,CAED,GAAME,CAAAA,OAAO,CAAGlB,aAAa,CAACc,aAAD,CAA7B,CACA,GAAMK,CAAAA,IAAI,CAAGR,OAAO,CAACC,CAAC,CAAG,CAAL,CAApB,CAEA,GACE,CAAC,CAACO,IAAD,EAASD,OAAO,GAAKlB,aAAa,CAACmB,IAAD,CAAnC,GACAT,YAAY,CAACO,QAAb,CAAsBC,OAAtB,CAFF,CAGE,CACA,MAAO,CAAEH,WAAW,CAAEG,OAAf,CAAwBF,KAAK,CAALA,KAAxB,CAAP,CACD,CAED,GACE,CAAC,CAACG,IAAD,EAASlB,YAAY,GAAKkB,IAAI,CAAClB,YAAhC,GACAS,YAAY,CAACO,QAAb,CAAsBhB,YAAtB,CAFF,CAGE,CACA,MAAO,CAAEc,WAAW,CAAEd,YAAf,CAA6Be,KAAK,CAALA,KAA7B,CAAP,CACD,CACF,CACF","sourcesContent":["// @flow\n\nimport { getLocales, handlers } from \"./module\";\n\nimport type {\n  Calendar,\n  Locale,\n  LocalizationEvent,\n  NumberFormatSettings,\n  Option,\n  TemperatureUnit,\n} from \"./types\";\n\nexport type {\n  Calendar,\n  Locale,\n  LocalizationEvent,\n  NumberFormatSettings,\n  TemperatureUnit,\n} from \"./types\";\n\nexport {\n  getCalendar,\n  getCountry,\n  getCurrencies,\n  getLocales,\n  getNumberFormatSettings,\n  getTemperatureUnit,\n  getTimeZone,\n  uses24HourClock,\n  usesMetricSystem,\n  usesAutoDateAndTime,\n  usesAutoTimeZone,\n} from \"./module\";\n\nfunction logUnknownEvent(type: string) {\n  console.error(`\\`${type}\\` is not a valid react-native-localize event`);\n}\nfunction getPartialTag({ languageCode, scriptCode }: Locale) {\n  return languageCode + (scriptCode ? \"-\" + scriptCode : \"\");\n}\n\nexport function addEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (!handlers.has(handler)) {\n    handlers.add(handler);\n  }\n}\n\nexport function removeEventListener(\n  type: LocalizationEvent,\n  handler: Function,\n): void {\n  if (type !== \"change\") {\n    logUnknownEvent(type);\n  } else if (handlers.has(handler)) {\n    handlers.delete(handler);\n  }\n}\n\nexport function findBestAvailableLanguage(\n  languageTags: string[],\n): {|\n  languageTag: string,\n  isRTL: boolean,\n|} | void {\n  const locales = getLocales();\n\n  for (let i = 0; i < locales.length; i++) {\n    const currentLocale = locales[i];\n    const { languageTag, languageCode, isRTL } = currentLocale;\n\n    if (languageTags.includes(languageTag)) {\n      return { languageTag, isRTL };\n    }\n\n    const partial = getPartialTag(currentLocale);\n    const next = locales[i + 1];\n\n    if (\n      (!next || partial !== getPartialTag(next)) &&\n      languageTags.includes(partial)\n    ) {\n      return { languageTag: partial, isRTL };\n    }\n\n    if (\n      (!next || languageCode !== next.languageCode) &&\n      languageTags.includes(languageCode)\n    ) {\n      return { languageTag: languageCode, isRTL };\n    }\n  }\n}\n"]}